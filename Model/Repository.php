<?php

namespace Mobbex\Subscriptions\Model;

abstract class Repository
{
    /** @var \Psr\Log\LoggerInterface */
    public $logger;

    /** Model factory class generated by Magento */
    public $factory;

    /** @var \Magento\Framework\Model\ResourceModel\Db\AbstractDb */
    public $resource;

    /** Model collection factory class generated by Magento */
    public $collectionFactory;

    public function __construct(
        \Psr\Log\LoggerInterface $logger
    ) {
        $this->logger = $logger;
    }

    /**
     * Build an instance of the object an try to fill props.
     * 
     * @param array $props Associative array with prop name and values.
     * 
     * @return \Magento\Framework\Model\AbstractModel
     */
    public function build($props = [])
    {
        // Get id from props
        $idField = $this->resource->getIdFieldName();
        $id      = isset($props[$idField]) ? $props[$idField] : null;

        // Load object from db data
        $model = $this->get($id);

        // Fill props passed as params
        return $this->fill($model, $props);
    }

    /**
     * Fill properties to an object model.
     * 
     * @param \Magento\Framework\Model\AbstractModel $model
     * @param array $props Associative array with prop name and values.
     * 
     * @return \Magento\Framework\Model\AbstractModel
     */
    public function fill($model, $props)
    {
        foreach ($props as $key => $value)
            $model->setData($key, $value);

        return $model;
    }

    /**
     * Get object from the value and field given.
     * 
     * @param mixed $value The value to match.
     * @param string $field The field name where search. Primary key by default.
     * 
     * @return \Magento\Framework\Model\AbstractModel
     */
    public function get($value = null, $field = null)
    {
        $model = $this->factory->create();
        $this->resource->load($model, $value, $field);
        return $model;
    }

    /**
     * Save object to db.
     * 
     * @param \Magento\Framework\Model\AbstractModel $model
     * @param object $module Send to fill mobbex response data before save (only for models that use modules when synchronizing).
     * 
     * @return \Magento\Framework\Model\AbstractModel
     */
    public function save($model, $module = null)
    {
        $this->resource->save($model);
        return $model;
    }

    /**
     * Synchronize object with service.
     * 
     * @param \Magento\Framework\Model\AbstractModel $model
     * 
     * @return object A module with mobbex response.
     */
    public function sync($model)
    {
        // Nothing here...
    }
}